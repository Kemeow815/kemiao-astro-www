---
export interface TagInfo {
  tag: string;
  count: number;
}

export interface Props {
  tags: TagInfo[];
}

const { tags } = Astro.props;
---

<div class="relative bg-white/40 dark:bg-zinc-900/40 backdrop-blur-md rounded-2xl overflow-hidden shadow-sm">
  <div class="absolute inset-0 bg-[radial-gradient(ellipse_at_top_right,_var(--tw-gradient-stops))] from-violet-100/20 via-transparent to-transparent dark:from-violet-900/10 dark:via-transparent dark:to-transparent"></div>
  <div class="relative p-5">
    <div class="flex items-center mb-5 border-b border-zinc-200/50 dark:border-zinc-700/50 pb-3">
      <span class="iconify tabler--hash text-lg text-zinc-400 dark:text-zinc-500 mr-2" aria-hidden="true"></span>
      <h3 class="text-lg font-medium text-zinc-700 dark:text-zinc-300">标签</h3>
    </div>
    
    <div class="flex flex-wrap gap-1.5 py-1">
      {tags.map(({ tag, count }) => (
        <a 
          href={`/blog/tags/${tag}`}
          class="transition-all duration-300 rounded-lg px-3 py-1.5 text-xs bg-zinc-100/70 dark:bg-zinc-800/50 text-zinc-600 dark:text-zinc-400 hover:bg-gradient-to-r hover:from-violet-500/20 hover:to-indigo-500/20 dark:hover:from-violet-800/30 dark:hover:to-indigo-800/30 hover:text-violet-700 dark:hover:text-violet-300 hover:-translate-y-0.5"
        >
          {tag} · {count}
        </a>
      ))}
    </div>
  </div>
</div>
